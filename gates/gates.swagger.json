{
  "swagger": "2.0",
  "info": {
    "title": "gates/gates.proto",
    "version": "version not set"
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/gates": {
      "post": {
        "summary": "Create a gate or a moving objects objects group.",
        "operationId": "MruVGatesService_CreateGate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/gatesCreateGateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "MruVGatesService"
        ]
      }
    },
    "/v1/gates/nearest": {
      "get": {
        "summary": "Find gate that is closest to a specific position.",
        "operationId": "MruVGatesService_FindNearestGate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/gatesFindNearestGateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "x",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "float"
          },
          {
            "name": "y",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "float"
          },
          {
            "name": "z",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "float"
          },
          {
            "name": "maxDistance",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "float"
          }
        ],
        "tags": [
          "MruVGatesService"
        ]
      }
    },
    "/v1/gates/{id}": {
      "get": {
        "summary": "Get a gate or a moving objects objects group.",
        "operationId": "MruVGatesService_GetGate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/gatesGetGateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "MruVGatesService"
        ]
      },
      "delete": {
        "summary": "Delete a gate or a moving objects objects group.",
        "operationId": "MruVGatesService_DeleteGate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/gatesDeleteGateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "MruVGatesService"
        ]
      },
      "patch": {
        "summary": "Update a gate or a moving objects objects group.",
        "operationId": "MruVGatesService_UpdateGate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/gatesUpdateGateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "MruVGatesService"
        ]
      }
    },
    "/v1/gates/{id}/close": {
      "post": {
        "summary": "Close a gate.",
        "operationId": "MruVGatesService_Close",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/gatesCloseResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "MruVGatesService"
        ]
      }
    },
    "/v1/gates/{id}/lock": {
      "post": {
        "summary": "Lock a gate. Locked gate cannot be opened.",
        "operationId": "MruVGatesService_Lock",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/gatesLockResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "MruVGatesService"
        ]
      }
    },
    "/v1/gates/{id}/open": {
      "post": {
        "summary": "Opens a gate.",
        "operationId": "MruVGatesService_Open",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/gatesOpenResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "MruVGatesService"
        ]
      }
    },
    "/v1/gates/{id}/unlock": {
      "post": {
        "summary": "Unload a gate, so it can be open.",
        "operationId": "MruVGatesService_Unlock",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/gatesUnlockResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "MruVGatesService"
        ]
      }
    }
  },
  "definitions": {
    "gatesCloseResponse": {
      "type": "object",
      "description": "Response message for rpc `Close`."
    },
    "gatesCreateGateResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        }
      },
      "description": "Response message for rpc `CreateGate`."
    },
    "gatesDeleteGateResponse": {
      "type": "object",
      "description": "Response message for rpc `DeleteGate`."
    },
    "gatesFetchAllGatesResponse": {
      "type": "object",
      "properties": {
        "gates": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/gatesGate"
          }
        }
      },
      "description": "Response message for rpc `FetchAllGates`."
    },
    "gatesFindNearestGateResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "distance": {
          "type": "number",
          "format": "float"
        }
      },
      "description": "Response message for rpc `FindNearestGate`."
    },
    "gatesGate": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "gateObjects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/objectsMovableObject"
          }
        },
        "spot": {
          "$ref": "#/definitions/spotsSpot"
        },
        "opened": {
          "type": "boolean"
        },
        "locked": {
          "type": "boolean"
        }
      }
    },
    "gatesGetGateResponse": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "movableObjects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/objectsMovableObject"
          },
          "description": "List of objects to move on gate close/open. Every object should have only 2 states: opened, closed."
        },
        "spot": {
          "$ref": "#/definitions/spotsSpot"
        },
        "opened": {
          "type": "boolean"
        },
        "locked": {
          "type": "boolean"
        }
      },
      "description": "Response message for rpc `GetGate`."
    },
    "gatesLockResponse": {
      "type": "object",
      "description": "Response message for rpc `Lock`."
    },
    "gatesOpenResponse": {
      "type": "object",
      "description": "Response message for rpc `Open`."
    },
    "gatesUnlockResponse": {
      "type": "object",
      "description": "Response message for rpc `Unlock`."
    },
    "gatesUpdateGateResponse": {
      "type": "object",
      "description": "Response message for rpc `UpdateGate`."
    },
    "objectsMaterial": {
      "type": "object",
      "properties": {
        "modelId": {
          "type": "integer",
          "format": "int32",
          "description": "The modelid on which the replacement texture is located. Use 0 for alpha. Use -1 to change the material color without altering the texture."
        },
        "txdName": {
          "type": "string",
          "title": "The name of the txd file which contains the replacement texture (use \"none\" if not required)"
        },
        "textureName": {
          "type": "string",
          "title": "The name of the texture to use as the replacement (use \"none\" if not required)"
        },
        "materialColor": {
          "type": "integer",
          "format": "int32",
          "description": "The object color to set, as an integer or hex in ARGB color format. Using 0 keeps the existing material color."
        }
      },
      "description": "Replace the texture of an object with the texture from another model in the game."
    },
    "objectsMaterialSize": {
      "type": "string",
      "enum": [
        "OBJECT_MATERIAL_SIZE_0",
        "OBJECT_MATERIAL_SIZE_32X32",
        "OBJECT_MATERIAL_SIZE_64X32",
        "OBJECT_MATERIAL_SIZE_64X64",
        "OBJECT_MATERIAL_SIZE_128X32",
        "OBJECT_MATERIAL_SIZE_128X64",
        "OBJECT_MATERIAL_SIZE_128X128",
        "OBJECT_MATERIAL_SIZE_256X32",
        "OBJECT_MATERIAL_SIZE_256X64",
        "OBJECT_MATERIAL_SIZE_256X128",
        "OBJECT_MATERIAL_SIZE_256X256",
        "OBJECT_MATERIAL_SIZE_512X64",
        "OBJECT_MATERIAL_SIZE_512X128",
        "OBJECT_MATERIAL_SIZE_512X256",
        "OBJECT_MATERIAL_SIZE_512X512"
      ],
      "default": "OBJECT_MATERIAL_SIZE_0"
    },
    "objectsMaterialText": {
      "type": "object",
      "properties": {
        "text": {
          "type": "string",
          "description": "The text to show on the object (MAX 2048 characters)."
        },
        "materialSize": {
          "$ref": "#/definitions/objectsMaterialSize",
          "description": "The size of the material (default: 256x128)."
        },
        "fontFace": {
          "type": "string",
          "description": "The font to use (default: Arial)."
        },
        "fontSize": {
          "type": "integer",
          "format": "int64",
          "description": "The size of the text (default: 24) (MAX 255)."
        },
        "bold": {
          "type": "boolean",
          "description": "Bold text. Set to 1 for bold, 0 for not (default: 1)."
        },
        "fontColor": {
          "type": "integer",
          "format": "int32",
          "description": "The color of the text, in ARGB format (default: White)."
        },
        "backColor": {
          "type": "integer",
          "format": "int32",
          "description": "The background color, in ARGB format (default: None (transparent))."
        },
        "textAlignment": {
          "type": "integer",
          "format": "int32",
          "description": "The alignment of the text (default: left)."
        }
      },
      "description": "Replace the texture of an object with text."
    },
    "objectsMovableObject": {
      "type": "object",
      "properties": {
        "object": {
          "$ref": "#/definitions/objectsObject"
        },
        "states": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/objectsState"
          },
          "description": "List of states that an object can take."
        }
      },
      "description": "A movable object."
    },
    "objectsObject": {
      "type": "object",
      "properties": {
        "model": {
          "type": "integer",
          "format": "int32"
        },
        "x": {
          "type": "number",
          "format": "float"
        },
        "y": {
          "type": "number",
          "format": "float"
        },
        "z": {
          "type": "number",
          "format": "float"
        },
        "rx": {
          "type": "number",
          "format": "float"
        },
        "ry": {
          "type": "number",
          "format": "float"
        },
        "rz": {
          "type": "number",
          "format": "float"
        },
        "worldId": {
          "type": "integer",
          "format": "int32",
          "description": "Virtual world id for which object will be visible. Set -1 to be visible for all."
        },
        "interiorId": {
          "type": "integer",
          "format": "int32",
          "description": "Interior id for which object will be visible. Set -1 to be visible for all."
        },
        "playerId": {
          "type": "integer",
          "format": "int32",
          "description": "SA-MP player id for which object will be visible. Set -1 to be visible for all."
        },
        "areaId": {
          "type": "integer",
          "format": "int32",
          "description": "Dynamic area id for which object will be visible. Set -1 to be visible for all."
        },
        "streamDistance": {
          "type": "number",
          "format": "float",
          "title": "Default streamer setting is 300.0"
        },
        "drawDistance": {
          "type": "number",
          "format": "float",
          "title": "Default streamer setting is 0.0 = default game draw distance"
        },
        "priority": {
          "type": "integer",
          "format": "int32"
        },
        "estateId": {
          "type": "integer",
          "format": "int64"
        },
        "materials": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/objectsMaterial"
          }
        },
        "materialTexts": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/objectsMaterialText"
          }
        }
      },
      "description": "SA-MP Dynamic object data structure."
    },
    "objectsState": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "x": {
          "type": "number",
          "format": "float"
        },
        "y": {
          "type": "number",
          "format": "float"
        },
        "z": {
          "type": "number",
          "format": "float"
        },
        "rx": {
          "type": "number",
          "format": "float"
        },
        "ry": {
          "type": "number",
          "format": "float"
        },
        "rz": {
          "type": "number",
          "format": "float"
        },
        "transitionSpeed": {
          "type": "number",
          "format": "float"
        }
      },
      "description": "Position and rotation state of moving object."
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "typeUrl": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "spotsSpot": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "icon": {
          "type": "integer",
          "format": "int32"
        },
        "marker": {
          "type": "integer",
          "format": "int32"
        },
        "x": {
          "type": "number",
          "format": "float"
        },
        "y": {
          "type": "number",
          "format": "float"
        },
        "z": {
          "type": "number",
          "format": "float"
        },
        "vw": {
          "type": "integer",
          "format": "int32"
        },
        "int": {
          "type": "integer",
          "format": "int32"
        }
      },
      "description": "Spot."
    }
  }
}
